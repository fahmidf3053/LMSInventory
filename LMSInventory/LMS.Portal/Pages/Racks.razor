@page "/racks"
@using Newtonsoft.Json;
@inject HttpClientHelper Http

<PageTitle>Racks</PageTitle>

<div class="text-center">
    <h1>Available Racks</h1>
</div>

@if (racks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table text-center">
        <thead>
            <tr>
                <th>Name</th>
                <th>Store</th>
                <th>Quantity</th>
                <th>Elements</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rack in racks)
            {
                @if (rack.Elements.Count > 0)
                {
                    <tr>
                        <td rowspan=@rack.Elements.Count>@rack.Name</td>
                        <td rowspan=@rack.Elements.Count>@rack.StoreName</td>
                        <td rowspan=@rack.Elements.Count>@rack.QuantityOfRacks</td>
                        <td> @rack.Elements[0].Name</td>
                        <td rowspan=@rack.Elements.Count>
                            <div class="d-flex justify-content-center">
                                <NavLink class="m-2" href="">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </NavLink>
                                <NavLink class="m-2" href="">
                                    <span class="oi oi-circle-x" aria-hidden="true"></span>
                                </NavLink>
                            </div>
                        </td>
                    </tr>
                    @foreach (var element in rack.Elements.Skip(1))
                    {
                        <tr>
                            <td>
                                @element.Name
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td>@rack.Name</td>
                        <td>@rack.StoreName</td>
                        <td>@rack.QuantityOfRacks</td>
                        <td></td>
                        <td>
                            <div class="d-flex justify-content-center">
                                <NavLink class="m-2" href="">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </NavLink>
                                <NavLink class="m-2" href="">
                                    <span class="oi oi-circle-x" aria-hidden="true"></span>
                                </NavLink>
                            </div>
                        </td>
                    </tr>
                }
            }
            <tr>
                <td colspan="5">
                    <NavLink href="addrack">
                        <span class="oi oi-plus" aria-hidden="true"></span>
                    </NavLink>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private RackResDTO[]? racks;

    protected override async Task OnInitializedAsync()
    {
        var resp = await Http.Post(Constants.APIEndpoints.GET_ALL_RACKS, "", true);
        resp.EnsureSuccessStatusCode();

        var result = resp.Content.ReadAsStringAsync().Result;
        racks = JsonConvert.DeserializeObject<RackResDTO[]>(result);
    }
}
