@page "/elements"
@using Newtonsoft.Json;
@inject HttpClientHelper Http
@inject SweetAlertService Swal
@inject NavigationManager _navigationManager

<PageTitle>Elements</PageTitle>

<div class="text-center">
    <h1>Available Elements</h1>
</div>

@if (elements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table text-center">
        <thead>
            <tr>
                <th>Name</th>
                <th>Rack</th>
                <th>Height</th>
                <th>Width</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var element in elements)
            {
                <tr>
                    <td>@element.Name</td>
                    <td>@element.RackName</td>
                    <td>@element.Height</td>
                    <td>@element.Width</td>
                    <td>
                        <div class="d-flex justify-content-center">
                            <NavLink class="m-2" href="">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </NavLink>
                            <NavLink class="m-2" href= @onclick="() => DeleteElement(element)">
                                <span class="oi oi-circle-x" aria-hidden="true"></span>
                            </NavLink>
                        </div>
                    </td>
                </tr>

            }
            <tr>
                <td colspan="5">
                    <NavLink href="addelement">
                        <span class="oi oi-plus" aria-hidden="true"></span>
                    </NavLink>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    private ElementResDTO[]? elements;

    protected override async Task OnInitializedAsync()
    {
        var resp = await Http.Post(Constants.APIEndpoints.GET_ALL_ELEMENTS, "", true);
        resp.EnsureSuccessStatusCode();

        var result = resp.Content.ReadAsStringAsync().Result;
        elements = JsonConvert.DeserializeObject<ElementResDTO[]>(result);
    }

    private async void DeleteElement(ElementResDTO element)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "You will not be able to recover " + element.Name + "!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes, delete it!",
                CancelButtonText = "No, keep it."
            });

        if (!string.IsNullOrEmpty(result.Value))
        {

            var resp = await Http.Post(Constants.APIEndpoints.DELETE_ELEMENT + "?id=" + element.Id, "", true);
            if (resp.IsSuccessStatusCode)
            {
                await Swal.FireAsync("Deleted", element.Name + " has been deleted!", SweetAlertIcon.Success);
            }
            else
            {
                string resFailed = resp.Content.ReadAsStringAsync().Result;
                FailedResponseDTO failed = JsonConvert.DeserializeObject<FailedResponseDTO>(resFailed);
                await Swal.FireAsync("Error", "Couldn't Delete " + element.Name, SweetAlertIcon.Error);
            }
        }
        _navigationManager.NavigateTo("elements", true);

    }
}
