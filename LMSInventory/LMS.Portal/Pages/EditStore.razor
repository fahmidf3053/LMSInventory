@page "/editstore/{storeId:int}"
@using Newtonsoft.Json;

@inject HttpClientHelper Http
@inject SweetAlertService Swal
@inject NavigationManager _navigationManager

<PageTitle>Edit Store</PageTitle>

<div class="text-center">
    <h1>Edit Store</h1>
</div>
@if (Store == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model=@Store OnValidSubmit=@HandleValidSubmit>
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="card p-5 m-5">
            <div class="form-group d-flex  my-2">
                <div class="col-2 fw-bold">
                    <label for="Name">Name:</label>
                </div>
                <div class="col-4">
                    <InputText @bind-Value=Store.Name class="form-control" id="Name" />
                </div>
            </div>
            <div class="form-group d-flex my-2">
                <div class="col-2 fw-bold">
                    <label for="Country">Country:</label>
                </div>
                <div class="col-4">
                    <InputText @bind-Value=Store.Country class="form-control" id="Country" />
                </div>
            </div>
            <input type="submit" class="btn btn-primary my-3 col-1 align-self-center" value="Update" />
        </div>
    </EditForm>
}



@code {
    [Parameter]
    public int storeId { get; set; }

    private StoreReqDTO Store;

    protected override async Task OnInitializedAsync()
    {
        var resp = await Http.Post(Constants.APIEndpoints.GET_STORE_BY_ID+"?id="+storeId, "", true);
        resp.EnsureSuccessStatusCode();

        var result = resp.Content.ReadAsStringAsync().Result;
        Store = JsonConvert.DeserializeObject<StoreReqDTO>(result);
    }

    private async void HandleValidSubmit(EditContext editContext)
    {
        var resp = await Http.Post(Constants.APIEndpoints.EDIT_STORE, Store, true);

        if (resp == null)
        {
            await Swal.FireAsync("Oops...", "Server Error!", "error");
            return;
        }

        var result = resp.Content.ReadAsStringAsync().Result;

        if (resp.IsSuccessStatusCode)
        {
            var edited = JsonConvert.DeserializeObject<StoreResDTO>(result);

            Store = new StoreReqDTO();
            SweetAlertResult saRes = await Swal.FireAsync("Success", edited.Name + " updated successfully!", "success");

            if (!string.IsNullOrEmpty(saRes.Value))
                _navigationManager.NavigateTo("stores", true);
        }
        else
        {
            var failedResponse = JsonConvert.DeserializeObject<FailedResponseDTO>(result);
            await Swal.FireAsync("Oops...", failedResponse.Detail, "error");
        }
    }
}
